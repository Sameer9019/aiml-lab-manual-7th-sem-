import numpy as np

x = np.array(([2,9],[1,5],[3,6]),dtype =float)
y=np.array(([92],[86],[89]),dtype = float)
x=x/np.amax(x,axis=0)
y=y/100

def sigmoid(x):
    return 1/(1+np.exp(-x))
def derivative_sigmoid(x):
    return x*(1-x)

wh=np.random.uniform(size=(2,3))
bh=np.random.uniform(size=(1,3))
wout=np.random.uniform(size=(3,1))
bout=np.random.uniform(size=(1,1))
epoch = 5000
lr=0.1
for i in range(epoch):
    hinp=np.dot(x,wh)+bh
    hact = sigmoid(hinp)
    outinp=np.dot(hact,wout)+bout
    output =sigmoid(outinp)
    
    hiddengrad = derivative_sigmoid(hact)
    outgrad = derivative_sigmoid(output)
    
    EO = y-output
    d_output = EO * outgrad
    
    EH = d_output.dot(wout.T)
    d_hidden=EH*hiddengrad
    
    wout+= hact.T.dot(d_output)*lr
    wh+= x.T.dot(d_hidden)*lr
print("Input : \n" + str(x))
print("Actual Output : \n" + str(y))
print("Predicted Output : \n", output)
